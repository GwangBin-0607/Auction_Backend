name: Docker Image CI

on:
  push:
    branches: [ "main" ]

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with: 
          username: ${{secrets.USERNAME}}
          password: ${{secrets.PASSWORD}}
      -
        name: checkout
        uses: actions/checkout@v3
      -
        name: Create Shell File
        run: |
          echo '#!/bin/bash' >> ./proxy/entry_test.sh
          echo echo "hellaao" >> ./proxy/entry_test.sh
          echo export NODEPORT=$NODEJSPORT >> ./proxy/entry_test.sh
          echo export PORT=$NGINXPORT >> ./proxy/entry_test.sh
          echo 'envsubst '\'\${PORT},\${NODEPORT}\'' < /etc/nginx/nginx_default.conf > /etc/nginx/nginx.conf' >> ./proxy/entry_test.sh
          echo nginx -g "'daemon off;'" >> ./proxy/entry_test.sh
        env: 
          NODEJSPORT: ${{secrets.NODEJSPORT}}
          NGINXPORT: ${{secrets.NGINXPORT}}
      -
        name: Create .env file
        run: |
          echo PORT=$NODEJSPORT >> ./Backend/.env
          echo PROD_USERNAME=$PROD_USERNAME >> ./Backend/.env
          echo PROD_PASSWORD=$PROD_PASSWORD >> ./Backend/.env
          echo PROD_DATABASE=$PROD_DATABASE >> ./Backend/.env
          echo PROD_HOST=$PROD_HOST >> ./Backend/.env
          echo PROD_PORT=$PROD_PORT >> ./Backend/.env
        
        env: 
          NODEJSPORT: ${{secrets.NODEJSPORT}}
          PROD_USERNAME: ${{secrets.PROD_USERNAME}}
          PROD_PASSWORD: ${{secrets.PROD_PASSWORD}}
          PROD_DATABASE: ${{secrets.PROD_DATABASE}}
          PROD_HOST: ${{secrets.PROD_HOST}}
          PROD_PORT: ${{secrets.PROD_PORT}}
      -
        name: docker-compose build
        run: docker-compose build
        env:
          HOSTPORT: ${{secrets.HOSTPORT}}
          CONTAINERPORT: ${{secrets.CONTAINERPORT}}
      -
        name: docker-compose push
        run: docker-compose push
        env:
          HOSTPORT: ${{secrets.HOSTPORT}}
          CONTAINERPORT: ${{secrets.CONTAINERPORT}}
  pull-run-image:
    needs: build-image
    name: continous deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      -
        name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{secrets.REMOTE_USERNAME}}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: ${{secrets.REMOTE_PORT}}
          source: "docker-compose.yml"
          target: "/home/ec2-user/"
      - 
        name: Connected to ec2
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.REMOTE_HOST}}
          username: ${{secrets.REMOTE_USERNAME}}
          port: ${{secrets.REMOTE_PORT}}
          key: ${{secrets.REMOTE_SSH_KEY}}
          script:
            "export HOSTPORT=${{secrets.HOSTPORT}} && export CONTAINERPORT=${{secrets.CONTAINERPORT}} && docker-compose pull && docker-compose up -d --no-build"
      
